name: Generate browsable code

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  build-generator:
    name: Build codebrowser generator
    runs-on: ubuntu-latest
    steps:
      - uses: awalsh128/cache-apt-pkgs-action@v1.4.3
        with:
          packages: cmake llvm-16 clang-17 libclang-17-dev llvm-17-dev libclang-cpp17 ninja-build wget unzip ca-certificates
      - uses: actions/checkout@v4
        with:
          repository: KDAB/codebrowser
          path: ${{github.workspace}}/codebrowser
      - run: mkdir ${{github.workspace}}/codebrowser/build
      - run: cmake -DCMAKE_BUILD_TYPE=Release -G Ninja .. && cmake --build . --parallel 2
        working-directory: ${{github.workspace}}/codebrowser/build
        env:
          CC: /usr/bin/clang-17
          CXX: /usr/bin/clang++-17
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: generator
          path: |
            ${{github.workspace}}/codebrowser/build/generator/codebrowser_generator
            ${{github.workspace}}/codebrowser/build/indexgenerator/codebrowser_indexgenerator
            ${{github.workspace}}/codebrowser/data
  
  generate-gdal:
    name: Generate GDAL
    runs-on: ubuntu-latest
    needs: [build-generator]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: generator
          path: ${{github.workspace}}/../generator
      - uses: awalsh128/cache-apt-pkgs-action@v1.4.3
        with:
          packages: libclang-cpp17 libproj-dev
      - uses: actions/checkout@v4
      - uses: actions/checkout@v4
        with:
          repository: OSgeo/gdal
          path: ${{github.workspace}}/src
      - name: Determine Git version
        run: echo "VERSION=`git describe --always --tags`" >> "$GITHUB_ENV"
        working-directory: ${{github.workspace}}/src
      - name: Create folders
        run: mkdir ${{github.workspace}}/{build,output}
      - name: Generate compile_commands.json
        run: |
          cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            ${{github.workspace}}/src
        working-directory: ${{github.workspace}}/build
      - name: Prepare files
        run: |
          cmake --build . -- generate_gdal_version_h
        working-directory: ${{github.workspace}}/build
      - name: Fix permissions
        run: |
          chmod +x ${{github.workspace}}/../generator/build/generator/codebrowser_generator
          chmod +x ${{github.workspace}}/../generator/build/indexgenerator/codebrowser_indexgenerator
      - name: Generate HTML
        run: |
          ${{github.workspace}}/../generator/build/generator/codebrowser_generator \
            -a \
            -o ${{github.workspace}}/output \
            -b ${{github.workspace}}/build \
            -p GDAL:${{github.workspace}}/src:$VERSION
      - name: Generate HTML index
        run: ${{github.workspace}}/../generator/build/indexgenerator/codebrowser_indexgenerator ${{github.workspace}}/output
      - name: Clean invalid files
        run: find ${{github.workspace}}/output -type f \( -name '*\**' -o -name '*\<**' -o -name '*\>**' \) -exec rm -- {} +
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docs-gdal
          path: ${{github.workspace}}/output

  generate-pdal:
    name: Generate PDAL
    runs-on: ubuntu-latest
    needs: [build-generator]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: generator
          path: ${{github.workspace}}/../generator
      - uses: awalsh128/cache-apt-pkgs-action@v1.4.3
        with:
          packages: libclang-cpp17 libproj-dev libgdal-dev libdraco-dev
      - uses: actions/checkout@v4
      - uses: actions/checkout@v4
        with:
          repository: PDAL/PDAL
          path: ${{github.workspace}}/src
      - name: Determine Git version
        run: echo "VERSION=`git describe --always --tags`" >> "$GITHUB_ENV"
        working-directory: ${{github.workspace}}/src
      - name: Create folders
        run: mkdir ${{github.workspace}}/{build,output}
      - name: Generate compile_commands.json
        run: |
          cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DBUILD_PLUGIN_DRACO=ON -DBUILD_PLUGIN_E57=ON -DBUILD_PLUGIN_FBX=ON -DBUILD_PLUGIN_HDF=ON -DBUILD_PLUGIN_ICEBRIDGE=ON \
            -DBUILD_PLUGIN_MBIO=ON -DBUILD_PLUGIN_PGPOINTCLOUD=ON -DBUILD_PLUGIN_TRAJECTORY=OFF \
            ${{github.workspace}}/src
        working-directory: ${{github.workspace}}/build
      - name: Prepare files
        run: |
          cmake --build . -- generate_dimension_hpp
        working-directory: ${{github.workspace}}/build
      - name: Fix permissions
        run: |
          chmod +x ${{github.workspace}}/../generator/build/generator/codebrowser_generator
          chmod +x ${{github.workspace}}/../generator/build/indexgenerator/codebrowser_indexgenerator
      - name: Generate HTML
        run: |
          ${{github.workspace}}/../generator/build/generator/codebrowser_generator \
            -a \
            -o ${{github.workspace}}/output \
            -b ${{github.workspace}}/build \
            -p PDAL:${{github.workspace}}/src:$VERSION \
            -e include/gdal:/usr/include/gdal/:https://${{github.repository_owner}}.github.io/geo-codebrowser/gdal
          ${{github.workspace}}/../generator/build/indexgenerator/codebrowser_indexgenerator ${{github.workspace}}/output
      - name: Clean invalid files
        run: find ${{github.workspace}}/output -type f \( -name '*\**' -o -name '*\<**' -o -name '*\>**' \) -exec rm -- {} +
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docs-pdal
          path: ${{github.workspace}}/output

  publish:
    name: Publish to Github Pages
    needs: [generate-pdal, generate-gdal]
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: docs-*
      - uses: actions/download-artifact@v4
        with:
          name: generator
          path: ${{github.workspace}}/../generator
      - name: Arrange files for deployment
        run: |
          mkdir deploy
          mv ${{github.workspace}}/../generator/data deploy
          mv ${{github.workspace}}/docs-gdal deploy/gdal
          mv ${{github.workspace}}/docs-pdal deploy/pdal
          ls deploy
      - uses: actions/upload-pages-artifact@v3
        with:
          path: deploy
      - uses: actions/deploy-pages@v4
        id: deployment
